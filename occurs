/*Define a predicate occurs(L,N,X) that succeeds if and only if 
X is the element occurring in position N of the list L*/ 



occur([Head|_], Pos, Elem, Helper):-
    Pos==Helper,
    Head==Elem.

occur([_|Tail], Pos, Elem, Helper):-
    New is Helper + 1,
    occur(Tail,Pos,Elem,New).

%wrapper
occurs(List,Position,Element):- occur(List, Position, Element, 1).

/*THOUGHT PROCESS:
 Adding a wrapper to include a counter that help knowing when arriving
to the specified position. If the helper counter is not equal to the
position we increment the helper by one and call the function recursively
with the Tail of the given list the position, the element and the new helper.
If position is equal to the helper we check if the head of the list is equal
to the given element if yes return true(yes) if not then return false(no)*/
